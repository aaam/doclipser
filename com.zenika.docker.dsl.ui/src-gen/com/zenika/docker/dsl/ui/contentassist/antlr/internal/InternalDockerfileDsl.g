/*
* generated by Xtext
*/
grammar InternalDockerfileDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.zenika.docker.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.zenika.docker.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.zenika.docker.dsl.services.DockerfileDslGrammarAccess;

}

@parser::members {
 
 	private DockerfileDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DockerfileDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDockerfile
entryRuleDockerfile 
:
{ before(grammarAccess.getDockerfileRule()); }
	 ruleDockerfile
{ after(grammarAccess.getDockerfileRule()); } 
	 EOF 
;

// Rule Dockerfile
ruleDockerfile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDockerfileAccess().getInstructionsAssignment()); }
(rule__Dockerfile__InstructionsAssignment)*
{ after(grammarAccess.getDockerfileAccess().getInstructionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCmd
entryRuleCmd 
:
{ before(grammarAccess.getCmdRule()); }
	 ruleCmd
{ after(grammarAccess.getCmdRule()); } 
	 EOF 
;

// Rule Cmd
ruleCmd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCmdAccess().getGroup()); }
(rule__Cmd__Group__0)
{ after(grammarAccess.getCmdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFrom
entryRuleFrom 
:
{ before(grammarAccess.getFromRule()); }
	 ruleFrom
{ after(grammarAccess.getFromRule()); } 
	 EOF 
;

// Rule From
ruleFrom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromAccess().getGroup()); }
(rule__From__Group__0)
{ after(grammarAccess.getFromAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getFromParserRuleCall_0()); }
	ruleFrom
{ after(grammarAccess.getInstructionAccess().getFromParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getCmdParserRuleCall_1()); }
	ruleCmd
{ after(grammarAccess.getInstructionAccess().getCmdParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Cmd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cmd__Group__0__Impl
	rule__Cmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getCmdAction_0()); }
(

)
{ after(grammarAccess.getCmdAccess().getCmdAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cmd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cmd__Group__1__Impl
	rule__Cmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getCMDKeyword_1()); }

	'CMD' 

{ after(grammarAccess.getCmdAccess().getCMDKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cmd__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cmd__Group__2__Impl
	rule__Cmd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getCmdAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cmd__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cmd__Group__3__Impl
	rule__Cmd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getExecutableAssignment_3()); }
(rule__Cmd__ExecutableAssignment_3)?
{ after(grammarAccess.getCmdAccess().getExecutableAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cmd__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cmd__Group__4__Impl
	rule__Cmd__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getParamsAssignment_4()); }
(rule__Cmd__ParamsAssignment_4)?
{ after(grammarAccess.getCmdAccess().getParamsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cmd__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cmd__Group__5__Impl
	rule__Cmd__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getGroup_5()); }
(rule__Cmd__Group_5__0)*
{ after(grammarAccess.getCmdAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cmd__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cmd__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getRightSquareBracketKeyword_6()); }

	']' 

{ after(grammarAccess.getCmdAccess().getRightSquareBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Cmd__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cmd__Group_5__0__Impl
	rule__Cmd__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getCmdAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cmd__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cmd__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getParamsAssignment_5_1()); }
(rule__Cmd__ParamsAssignment_5_1)
{ after(grammarAccess.getCmdAccess().getParamsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__From__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__From__Group__0__Impl
	rule__From__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__From__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getFROMKeyword_0()); }

	'FROM' 

{ after(grammarAccess.getFromAccess().getFROMKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__From__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__From__Group__1__Impl
	rule__From__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__From__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getNameAssignment_1()); }
(rule__From__NameAssignment_1)
{ after(grammarAccess.getFromAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__From__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__From__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__From__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getTagAssignment_2()); }
(rule__From__TagAssignment_2)?
{ after(grammarAccess.getFromAccess().getTagAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Dockerfile__InstructionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDockerfileAccess().getInstructionsInstructionParserRuleCall_0()); }
	ruleInstruction{ after(grammarAccess.getDockerfileAccess().getInstructionsInstructionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__ExecutableAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getExecutableSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getCmdAccess().getExecutableSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__ParamsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getParamsSTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getCmdAccess().getParamsSTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cmd__ParamsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCmdAccess().getParamsSTRINGTerminalRuleCall_5_1_0()); }
	RULE_STRING{ after(grammarAccess.getCmdAccess().getParamsSTRINGTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__From__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFromAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__From__TagAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromAccess().getTagTAG_IDTerminalRuleCall_2_0()); }
	RULE_TAG_ID{ after(grammarAccess.getFromAccess().getTagTAG_IDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_TAG_ID : '^'? ~(' ')* ':' ('a'..'z'|'A'..'Z'|'_'|'0'..'9') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


