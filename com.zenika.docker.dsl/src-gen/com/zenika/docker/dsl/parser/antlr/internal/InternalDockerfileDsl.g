/*
* generated by Xtext
*/
grammar InternalDockerfileDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.zenika.docker.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.zenika.docker.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.zenika.docker.dsl.services.DockerfileDslGrammarAccess;

}

@parser::members {

 	private DockerfileDslGrammarAccess grammarAccess;
 	
    public InternalDockerfileDslParser(TokenStream input, DockerfileDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Dockerfile";	
   	}
   	
   	@Override
   	protected DockerfileDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDockerfile
entryRuleDockerfile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDockerfileRule()); }
	 iv_ruleDockerfile=ruleDockerfile 
	 { $current=$iv_ruleDockerfile.current; } 
	 EOF 
;

// Rule Dockerfile
ruleDockerfile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDockerfileAccess().getInstructionsInstructionParserRuleCall_0()); 
	    }
		lv_instructions_0_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDockerfileRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_0_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getFromParserRuleCall_0()); 
    }
    this_From_0=ruleFrom
    { 
        $current = $this_From_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getCmdParserRuleCall_1()); 
    }
    this_Cmd_1=ruleCmd
    { 
        $current = $this_Cmd_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCmd
entryRuleCmd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCmdRule()); }
	 iv_ruleCmd=ruleCmd 
	 { $current=$iv_ruleCmd.current; } 
	 EOF 
;

// Rule Cmd
ruleCmd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCmdAccess().getCmdAction_0(),
            $current);
    }
)	otherlv_1='CMD' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCmdAccess().getCMDKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCmdAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		lv_executable_3_0=RULE_STRING
		{
			newLeafNode(lv_executable_3_0, grammarAccess.getCmdAccess().getExecutableSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCmdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"executable",
        		lv_executable_3_0, 
        		"STRING");
	    }

)
)?(
(
		lv_params_4_0=RULE_STRING
		{
			newLeafNode(lv_params_4_0, grammarAccess.getCmdAccess().getParamsSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCmdRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"STRING");
	    }

)
)?(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCmdAccess().getCommaKeyword_5_0());
    }
(
(
		lv_params_6_0=RULE_STRING
		{
			newLeafNode(lv_params_6_0, grammarAccess.getCmdAccess().getParamsSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCmdRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"STRING");
	    }

)
))*	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCmdAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleFrom
entryRuleFrom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFromRule()); }
	 iv_ruleFrom=ruleFrom 
	 { $current=$iv_ruleFrom.current; } 
	 EOF 
;

// Rule From
ruleFrom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='FROM' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFromAccess().getFROMKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFromAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFromRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_tag_2_0=RULE_TAG_ID
		{
			newLeafNode(lv_tag_2_0, grammarAccess.getFromAccess().getTagTAG_IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFromRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tag",
        		lv_tag_2_0, 
        		"TAG_ID");
	    }

)
)?)
;





RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_TAG_ID : '^'? ~(' ')* ':' ('a'..'z'|'A'..'Z'|'_'|'0'..'9') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


