/*
* generated by Xtext
*/
package com.zenika.docker.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DockerfileDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DockerfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dockerfile");
		private final Assignment cInstructionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_0 = (RuleCall)cInstructionsAssignment.eContents().get(0);
		
		//Dockerfile:
		//	instructions+=Instruction*;
		public ParserRule getRule() { return rule; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment() { return cInstructionsAssignment; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_0() { return cInstructionsInstructionParserRuleCall_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFromParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCmdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instruction:
		//	From | Cmd;
		public ParserRule getRule() { return rule; }

		//From | Cmd
		public Alternatives getAlternatives() { return cAlternatives; }

		//From
		public RuleCall getFromParserRuleCall_0() { return cFromParserRuleCall_0; }

		//Cmd
		public RuleCall getCmdParserRuleCall_1() { return cCmdParserRuleCall_1; }
	}

	public class CmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCMDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExecutableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExecutableSTRINGTerminalRuleCall_3_0 = (RuleCall)cExecutableAssignment_3.eContents().get(0);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsSTRINGTerminalRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParamsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParamsSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cParamsAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Cmd:
		//	{Cmd} "CMD" "[" executable=STRING? params+=STRING? ("," params+=STRING)* "]";
		public ParserRule getRule() { return rule; }

		//{Cmd} "CMD" "[" executable=STRING? params+=STRING? ("," params+=STRING)* "]"
		public Group getGroup() { return cGroup; }

		//{Cmd}
		public Action getCmdAction_0() { return cCmdAction_0; }

		//"CMD"
		public Keyword getCMDKeyword_1() { return cCMDKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//executable=STRING?
		public Assignment getExecutableAssignment_3() { return cExecutableAssignment_3; }

		//STRING
		public RuleCall getExecutableSTRINGTerminalRuleCall_3_0() { return cExecutableSTRINGTerminalRuleCall_3_0; }

		//params+=STRING?
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_4_0() { return cParamsSTRINGTerminalRuleCall_4_0; }

		//("," params+=STRING)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//params+=STRING
		public Assignment getParamsAssignment_5_1() { return cParamsAssignment_5_1; }

		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_5_1_0() { return cParamsSTRINGTerminalRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTagAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagTAG_IDTerminalRuleCall_2_0 = (RuleCall)cTagAssignment_2.eContents().get(0);
		
		//From:
		//	"FROM" name=ID tag=TAG_ID?;
		public ParserRule getRule() { return rule; }

		//"FROM" name=ID tag=TAG_ID?
		public Group getGroup() { return cGroup; }

		//"FROM"
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//tag=TAG_ID?
		public Assignment getTagAssignment_2() { return cTagAssignment_2; }

		//TAG_ID
		public RuleCall getTagTAG_IDTerminalRuleCall_2_0() { return cTagTAG_IDTerminalRuleCall_2_0; }
	}
	
	
	private final DockerfileElements pDockerfile;
	private final InstructionElements pInstruction;
	private final CmdElements pCmd;
	private final FromElements pFrom;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tTAG_ID;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DockerfileDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDockerfile = new DockerfileElements();
		this.pInstruction = new InstructionElements();
		this.pCmd = new CmdElements();
		this.pFrom = new FromElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tTAG_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAG_ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.zenika.docker.dsl.DockerfileDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Dockerfile:
	//	instructions+=Instruction*;
	public DockerfileElements getDockerfileAccess() {
		return pDockerfile;
	}
	
	public ParserRule getDockerfileRule() {
		return getDockerfileAccess().getRule();
	}

	//Instruction:
	//	From | Cmd;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Cmd:
	//	{Cmd} "CMD" "[" executable=STRING? params+=STRING? ("," params+=STRING)* "]";
	public CmdElements getCmdAccess() {
		return pCmd;
	}
	
	public ParserRule getCmdRule() {
		return getCmdAccess().getRule();
	}

	//From:
	//	"FROM" name=ID tag=TAG_ID?;
	public FromElements getFromAccess() {
		return pFrom;
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal TAG_ID:
	//	"^"? !" "* ":" ("a".."z" | "A".."Z" | "_" | "0".."9") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getTAG_IDRule() {
		return tTAG_ID;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
